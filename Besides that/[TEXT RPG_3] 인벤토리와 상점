#include<iostream>
#include <stdlib.h> // rand()함수 포함 라이브러리
#include <time.h> // time()함수 포함 라이브러리

using namespace std;
using std::cout;
using std::endl;
using std::cin;
using std::system;

const int NAMESIZE = 32;
/// <summary> 상태 </summary>
typedef struct tag_Info
{
	char iName[NAMESIZE];
	int iHp = 100;
	int iDefence;
	int iAttack;
	int iGold;
}INFO;

/// <summary> 아이템 포션 능력치 </summary>
typedef struct tag_PotionStat
{
	char iName[32];
	int PotionHp;
	int Defence;
	int Attack;

}PotionStat;

/// <summary> 직업 </summary>
enum Job
{
	Knife = 1,
	Magica,
	Archar
};

/// <summary> 사물 </summary>
typedef struct tag_Thing
{
	int RedPotion	= 0;
	int GreenPotion = 0;
	int BluePotion  = 0; 
	int Sword		= 0; 
	int Magicpipe	= 0; 
	int Arrow		= 0; 

}Item;



// 함수 (앞으로 인자를 3개 이상 가지는 것에 유의 하자)

/// <summary> 게임 초기 설정 </summary>
void GameStart(); // 게임 시작
void JobSelect(INFO* Player); // 캐릭터 선택
void StatBar(INFO* characterInfo); // 캐릭터 상태바

/// <summary> 맵 생성 </summary>
int Field(INFO* Player, INFO* Monster); // 필드 들어가기
void BattleMap(INFO* Player, INFO* Monster, Item* sItem); //맵 선택

/// <summary> 몬스터 생성 </summary>
void CreateMonster(INFO* Monster, int iChoice, int* RandomNumber); // 몬스터 난이도 생성
void MonsterName(int* RandomNumber, INFO* nMonster); // 몬스터 이름

/// <summary> 배틀 </summary>
int BattleChoice(INFO* Player, INFO* Monster, bool* iWin); // 전투 선택
int BattleStart(INFO* Player, INFO* Monster, bool* pWin, int* RandomNumber, Item* sItem); // 배틀 시작

/// <summary> 인벤토리 </summary>
void Inventory(INFO* Player, int BagSize[], Item* sItem); // 인벤토리
void UseItem(INFO* Player, int* iChoice, bool* Jobhint, Item* sItem);// 아이템 사용하기

/// <summary> 상점 </summary>
void Store(INFO* Player, int* Bag, int* BagSize, Item* sItem, bool* iBattleReturn); // 상점 들어가기
int SmallTalk(INFO* Player, bool* iBattleReturn); // 주인장과 대화
void StoreIN(INFO* Player, int* Bag, int* BagSize, Item* sItem); // 상점 내부
int ReturnSelect(INFO* Player, int* qGold); // 구입 여부
void Owner(INFO* Player, INFO* onwer); // 주인장 상태
int BattleOwner(INFO* Player, INFO* owner, bool* iBattleReturn); // 주인장 배틀 시작
bool BattleOnwerChice(bool* iBattleReturn);  

/// <summary> 로드/세이브 </summary>
bool Load(INFO* Player);
bool Save(INFO* Player);



/// <summary> 메인 함수 </summary>
int main()
{
	GameStart();
}

/// <summary> 게임 시작 </summary>

void GameStart()
{
	// Player 구조체 포인터
	INFO info;
	INFO* Player = new INFO();

	// Monster 동적할당 생성
	// ◈ 동적 할당 함수를 따로 빼주는 것이 좋다는데 어떻게 할까?
	INFO* Monster = new INFO[10];

	int iChoice;

	while(true)
	{
		cout << "[1] 게임 시작" << endl;
		cout << "[2] 이어 하기" << endl;
		cout << "[3] 종료 하기" << endl;

		cout << "> ";
		cin >> iChoice;

		if (iChoice == 1)
		{
			JobSelect(Player);	// 직업 선택
			Field(Player, Monster);		// 필드 들어가기
		}
		else if (iChoice == 2)
		{
			if (!Load(Player))
			{
				cout << endl << "PAYLER DATA ERRER!" << endl;

			}
			cout << "SUCCESS PLAYER LOAD" << endl;
			Field(Player, Monster);
		}
		else
		{
			return;
		}
	}
}

bool Load(INFO* Player)
{
	FILE* pLoad = NULL;

	errno_t errLoad = fopen_s(&pLoad, "player.txt", "rb");

	if (0 == errLoad)
	{
		fread(&Player->iName, sizeof(&Player->iName), 1, pLoad);
		fread(&Player->iHp, sizeof(int), 4, pLoad);
		fread(&Player->iDefence, sizeof(int), 1, pLoad);
		fread(&Player->iAttack, sizeof(int), 1, pLoad);
		fread(&Player->iGold, sizeof(int), 1, pLoad);

		fclose(pLoad);
		return true;
	}
	return false;
	
}


bool Save(INFO* Player)
{
	FILE* pSave = NULL;
	
	//이게 몰까
	errno_t errSave = fopen_s(&pSave, "player.txt", "wb");

	if (0 == errSave)
	{
		fwrite(&Player->iName, sizeof(&Player->iName), 1, pSave);
		fwrite(&Player->iHp, sizeof(int), 1, pSave);
		fwrite(&Player->iDefence, sizeof(int), 1, pSave);
		fwrite(&Player->iAttack, sizeof(int), 1, pSave);
		fwrite(&Player->iGold, sizeof(int), 1, pSave);

		fclose(pSave);
		return true;
	}
	return false;

}

/// <summary> 직업 선택 </summary>
void JobSelect(INFO* Player)
{
	system("cls");
	int iChoice;

	cout << "▶ 원하시는 직업을 골라주세요" << endl;
	cout << "▶ [1] 기사" << endl;
	cout << "▶ [2] 마법사" << endl;
	cout << "▶ [3] 궁수" << endl;
	cout << "> ";
	cin >> iChoice;
	cout << endl;

	switch (iChoice)
	{
	case Knife : 
		cout << "기사 캐릭터 생성 중..." << endl;
		strcpy_s(Player->iName, sizeof(Player->iName), "기사");
		Player->iHp = 100;
		Player->iAttack = 20;
		Player->iDefence = 2;
		Player->iGold = 200;
		break;

	case Magica:
		cout << "마법사 캐릭터 생성 중..." << endl;
		strcpy_s(Player->iName, sizeof(Player->iName), "마법사");
		Player->iHp = 110;
		Player->iAttack = 12;
		Player->iDefence = 3;
		Player->iGold = 200;
		break;

	case Archar:
		cout << "궁수 캐릭터 생성 중..." << endl;
		strcpy_s(Player->iName, sizeof(Player->iName), "궁수");
		Player->iHp = 90;
		Player->iAttack = 15;
		Player->iDefence = 3;
		Player->iGold = 200;
		break;
		
	default : 
		return;
	}
}

/// <summary> 캐릭터 상태바 </summary>
void StatBar(INFO* characterInfo)
{
	cout << "직업 : " << characterInfo->iName << endl;
	cout << "HP : " << characterInfo->iHp << "\t" << "ATTACK : " << characterInfo->iAttack << "\t" << "DEFENCE : " << characterInfo->iDefence << endl;
	cout << "GOLD :" << characterInfo->iGold << "G" << endl;
	cout << "=============================================================" << endl;
	cout << endl;
}

/// <summary> 필드 </summary>
int Field(INFO* Player, INFO* Monster)
{
	system("pause");

	Save(Player);
	bool iWhile = true;
	int* Bag = new int[30];

	static int BagSize(0);
	bool iBattleReturn = false;

	Item* sItem = new Item();

	while(iWhile)
	{
		system("cls");
		int iChoice;
		StatBar(Player);

		cout << "원하시는 옵션을 골라주세요" << endl;
		cout << "[1] BATTLE" << endl;
		cout << "[2] INVENTORY" << endl;
		cout << "[3] STORE" << endl;
		cout << "[4] RETURN" << endl;
		cout << "> ";
		cin >> iChoice;
		cout << endl;

		switch (iChoice)
		{
		case 1:
			if (Player->iHp <= 0)
			{
				cout << "체력이 부족해 게임을 진행할 수 없습니다" << endl;
				system("pause");
				system("cls");
				Field(Player, Monster);
			}
			else
			{
				cout << Player->iName << "가 전투를 준비하고 있습니다..." << endl;
				system("pause");
				system("cls");
				BattleMap(Player, Monster, sItem); // 맵 들어가기
			}
			break;

		case 2:
			cout << Player->iName << "가 가방을 열고 있습니다..." << endl;
			system("pause");
			system("cls");
			Inventory(Player, &BagSize, sItem);
			break;

		case 3:
			if (iBattleReturn == true)
			{
				cout << "주인장의 저주로 상점에 들어갈 수 없습니다" << endl;
				system("pause");
				system("cls");
			}
			else if(iBattleReturn == false)
			{
				cout << Player->iName << "가 상점에 들어가고 있습니다..." << endl;
				system("pause");
				system("cls");
				Store(Player, Bag, &BagSize, sItem, &iBattleReturn);
			}
			break;

		default:
			iWhile= false;
			return 0;
		}
	}
	return 0;
}

/// <summary> 인벤토리 </summary>
void Inventory(INFO* Player, int BagSize[], Item* sItem) // 안 담김
{
	StatBar(Player);

	//static int BagSize(0); -> 이건 가방 개수 세는 거, 안에 아이템 번호 들어있음
	cout << "▶ 가방 내부 " << endl;
	cout << endl;

	int iChoice;

	// 포션은 구조체로 만들어서 올려주자 개수 말하는 거임
	cout << "[1] [공격력 상승약] 보유 : " << sItem->RedPotion << endl;
	cout << "[2] [방어력 상승약] 보유 : " << sItem->GreenPotion << endl;
	cout << "[3] [체력 회복약] 보유	 : " << sItem->BluePotion << endl;
	cout << "[4] [전설의 마검] 보유   : " << sItem->Sword << endl;
	cout << "[5] [고대 마법봉] 보유   : " << sItem->Magicpipe << endl;
	cout << "[6] [불 화살] 보유       : " << sItem->Arrow << endl;
	cout << endl;

	cout << "[1] 아이템 사용" << endl;
	cout << "[2] 돌아가기" << endl;
	cin >> iChoice;

	if(iChoice == 1)
	{
		int iUseItemChoice;
		cout << "사용하실 아이템의 번호를 골라주세요" << endl;
		cout << "> ";
		cin >> iUseItemChoice;

		bool Jobhint = true;
		bool fJobhint = false;

		// 아이템 종류 분리

		switch (iUseItemChoice)
		{
		case 1:
		if(sItem->RedPotion > 0)
		{
			Player->iHp += 20;
			Player->iDefence += 5;
			Player->iAttack += 5;
			UseItem(Player, &iChoice, &fJobhint, sItem);
			sItem->RedPotion--;
		}
		else
		{
			cout << "사용 아이템을 가지고 있지 않습니다" << endl;
		}
		break;


		case 2:
		if (sItem->GreenPotion > 0)
		{
			Player->iHp += 5;
			Player->iDefence += 10;
			Player->iAttack += 3;
			UseItem(Player, &iChoice,&fJobhint, sItem);
			sItem->GreenPotion--;
		}
		else
		{
			cout << "사용 아이템을 가지고 있지 않습니다" << endl;
			system("pause");
		}
		break;

		case 3:
		if (sItem->BluePotion > 0)
		{
			Player->iHp += 20;
			Player->iDefence += 3;
			Player->iAttack += 10;
			UseItem(Player, &iChoice, &fJobhint, sItem);
			sItem->BluePotion--;
		}
		else
		{
			cout << "사용 아이템을 가지고 있지 않습니다" << endl;
		}
		break;

		case 4:
		if(sItem->Sword > 0)
		{
			strcpy_s(Player->iName, "전설의 기사");
			Player->iHp += 30;
			Player->iDefence += 20;
			Player->iAttack += 40;
			sItem->Sword--;
		}
		else
		{
			cout << "사용 아이템을 가지고 있지 않습니다" << endl;
		}
			break;

		case 5:
		if (sItem->Magicpipe > 0)
		{
			strcpy_s(Player->iName, "빛의 마법사");
			UseItem(Player, &iChoice, &Jobhint, sItem);
			Player->iHp += 30;
			Player->iDefence += 30;
			Player->iAttack += 30;
			sItem->Magicpipe--;
		}
		else
		{
			cout << "사용 아이템을 가지고 있지 않습니다" << endl;
		}
		break;

		case 6:
		if (sItem->Arrow > 0)
		{
			strcpy_s(Player->iName, "태양의 궁수");
			UseItem(Player, &iChoice, &Jobhint, sItem);
			Player->iHp += 40;
			Player->iDefence += 30;
			Player->iAttack += 20;
			sItem->Arrow--;
		}
		else
		{
			cout << "사용 아이템을 가지고 있지 않습니다" << endl;
		}
		break;
		}
		
	}
	return;
}

/// <summary> 아이템 사용하기 </summary>
void UseItem(INFO* Player, int* iChoice, bool* Jobhint, Item* sItem)
{
	PotionStat* ItemStat = new PotionStat();

	if (*iChoice == 0 || 7 <= *iChoice)
	{
		cout << "존재하지 않는 아이템 입니다" << endl;
		return;
	}
	else
	{
		cout << "공격력 [" << ItemStat->Attack << "] 상승 했습니다" << endl;
		cout << "방어력 [" << ItemStat->Defence << "] 상승 했습니다" << endl;
		cout << "체력 [" << ItemStat->PotionHp << "] 상승 했습니다" << endl;

		if (*Jobhint = true)
		{
			cout << Player->iName << " 라는 칭호를 얻었습니다!" << endl;
		}

	}

	// 1. 회복약 경우 최대 player->iHp를 넘길 수 없다
	// 2. 먄약 보유하지 않은 아이템이라면 없다는 문구를 띄운다
	// 3. 먄약 보유한 아이템이라면 사용 후 Player->  가 오른다.
}

/// <summary> 상점 </summary>
void Store(INFO* Player, int* Bag, int* BagSize, Item* sItem, bool* iBattleReturn)
{
	while(true)
	{
		system("cls");
		StatBar(Player);

		int iChoice;

		if (*iBattleReturn == true)
		{
			return;
		}

		cout << "어서오세요! 신상 물건 마음껏 보고 가세요~" << endl;
		cout << "[1] 둘러보기" << endl;
		cout << "[2] 돌아가기" << endl;
		cout << "[3] 시비걸기" << endl;
		cout << "> ";
		cin >> iChoice;

		switch (iChoice)
		{
		case 1:
			// 상점 둘러보기
			StoreIN(Player, Bag, BagSize, sItem);
			break;

		case 2:
			//돌아가기
			return;

		case 3:
			// 주인장과 대화하기
			cout << "주인장에게 시비거는 중.." << endl;
			system("pause");
			system("cls");
			SmallTalk(Player, iBattleReturn);
			break;

		default:
			return;
		}
	}
}

int SmallTalk(INFO* Player, bool* iBattleReturn)
{
	StatBar(Player);

	INFO* owner = new INFO();
	
	cout << "주인장 : 그렇게 원하신다면 상대해드리지요" << endl;
	// 주인장한테 시비걸고 주인장 이기면 1000g 털리는 대신 상점 이용 못함

	Owner(Player, owner);

	// 도망가면 true 공격 시 false
	while(BattleOnwerChice(iBattleReturn) == false)
	{
		if (*iBattleReturn == true)
			return 0;

		system("cls");
		StatBar(Player);
		StatBar(owner);
		BattleOwner(Player, owner, iBattleReturn);
	}
	return 0;
}

bool BattleOnwerChice(bool* iBattleReturn)
{
	if (*iBattleReturn == true)
		return 0;

	int iChoice;

	cout << "[1] 공격\t" << "[2] 도망" << endl;
	cout << "> ";
	cin >> iChoice;

	if (iChoice == 2)
	{
		int iRun;
		cout << "도망칠 시, 다시는 상점을 이용할 수 없게 됩니다." << endl;
		cout << "정말 도망치시겠습니까?" << endl;
		cout << "[1] 네\t" << "[2] 아니오" << endl;
		cin >> iRun;

		if (iRun == 1)
			*iBattleReturn = true; // true 시 상점은 다시 이용할 수 없도록 한다.
	}
	return 0;
}

void Owner(INFO* Player, INFO* owner)
{
	// 주인장 INFO

	owner->iAttack = 100;
	owner->iDefence = 50;
	owner->iHp = 300;
	owner->iGold = 2000;
	strcpy_s(owner->iName, "[히든 보스] 주인장");

	// 주인장과의 배틀 시작
}

int BattleOwner(INFO* Player, INFO* owner, bool* iBattleReturn)
{
	static int iRound(1);

	cout << iRound << " Round!" << endl;

	Player->iHp -= owner->iAttack - Player->iDefence; // 주인장의 공격
	owner->iHp -= Player->iAttack - owner->iDefence; // 플레이어의 공격

	if (owner->iHp <= 0)
	{
		cout << Player->iName << "의 승리!!" << endl;
		cout << "주인장의 모든 스탯은 " << Player->iName << "에게 부여됩니다" << endl;
		
		// 주인장 능력치 전이
		Player->iHp += owner->iHp;
		Player->iAttack += owner->iAttack;
		Player->iDefence += owner->iDefence;
		Player->iGold += owner->iGold;
	}
	
	if (Player->iHp <= 0)
	{
		cout << Player->iName << "는 사망했습니다" << endl;
		cout << "※ 앞으로 상점을 이용하실 수 없습니다 ※" << endl;
		Player->iHp = 0;

		*iBattleReturn = true;
		system("pause");
		system("cls");

		return 0;
	}
}


/// <summary> 상점 내부 둘러보기 </summary>
void StoreIN(INFO* Player, int* Bag, int* BagSize, Item* sItem)
{
	system("cls");
	int iBuy; // 선택
	int iGlod = 100;
	int* const qGlod = &iGlod; // 가격

	int* BuyStorage= new int[30];
	
	static int iCount(0);
	while(true)
	{
		system("cls");
		StatBar(Player);
		//물건 종류
		cout << "구입할 물건을 골라주세요" << endl;
		cout << "[1] 공격력 상승약 [+5]" << endl;
		cout << "[2] 방어력 상승약 [+5]" << endl;
		cout << "[3] 체력 회복약 [+20]" << endl;
		cout << "[4] 전설의 마검" << endl;
		cout << "[5] 고대 마법봉" << endl;
		cout << "[6] 불 화살" << endl;
		cout << "[7] 돌아가기" << endl;
		cout << "> ";
		cin >> iBuy;
		cout << endl;

		system("cls");
		StatBar(Player);

		// 소비하다
		switch (iBuy)
		{
		case 1:
			*qGlod = 300;
			cout << "▶ 가격은 " << *qGlod << "G 입니다" << endl;
			if (ReturnSelect(Player, qGlod) == 1)
			{
				BuyStorage[iCount] = iBuy;
				iCount++; // 현재 산 물건 카운트
				sItem->RedPotion++;
			}
			break;

		case 2:
			*qGlod = 300;
			cout << "▶ 가격은 " << *qGlod << "G 입니다" << endl;
			if (ReturnSelect(Player, qGlod) == 1)
			{
				BuyStorage[iCount] = iBuy;
				iCount++;
				sItem->GreenPotion++;
			}
			break;

		case 3:
			*qGlod = 300;
			cout << "▶ 가격은 " << *qGlod << "G 입니다" << endl;
			if (ReturnSelect(Player, qGlod) == 1)
			{
				BuyStorage[iCount] = iBuy;
				iCount++;
				sItem->BluePotion++;
			}
			break;

		case 4:
			*qGlod = 2000;
			cout << "▶ 가격은 " << *qGlod << "G 입니다" << endl;
			if (ReturnSelect(Player, qGlod) == 1)
			{
				BuyStorage[iCount] = iBuy;
				iCount++;
				sItem->Sword++;
			}
			break;

		case 5:
			*qGlod = 2000;
			cout << "▶ 가격은 " << *qGlod << "G 입니다" << endl;
			if (ReturnSelect(Player, qGlod) == 1)
			{
				BuyStorage[iCount] = iBuy;
				iCount++;
				sItem->Magicpipe++;
			}
			break;

		case 6:
			*qGlod = 2000;
			cout << "▶ 가격은 " << *qGlod << "G 입니다" << endl;
			if (ReturnSelect(Player, qGlod) == 1)
			{
				BuyStorage[iCount] = iBuy;
				iCount++;
				sItem->Arrow++;
			}
			break;

		default:
			return;
		}
	}

	for (int i = *BagSize; i < iCount; i++)
	{
		Bag[i] = BuyStorage[i]; // 가방에 숫자 저장
		*BagSize++; // 가방 size 카운트 , 나중에 소비하면 다시 줄어든다
	}
}

/// <summary> 아이템 구입 </summary>rand
int ReturnSelect(INFO* Player, int* qGold)
{
	int iChoice;
	 
	cout << endl;
	cout << "▶ 정말로 구입하시겠습니까?" << endl;
	cout << "[1] 예" << endl; 
	cout << "[2] 아니오" << endl;
	cout << "> ";
	cin >> iChoice;

	system("cls");
	StatBar(Player);

	if (iChoice == 1)
	{
		if (Player->iGold >= *qGold)
		{
			Player->iGold -= *qGold; // 돈은 빼가고 물건은 인벤토리에서 사용
			system("cls");
			StatBar(Player);
			cout << endl;
			cout << "▶ 구입하였습니다" << endl;
			system("pause");
			return 1;
		}
		else
		{
			cout << endl;
			cout << "▶ 돈이 모자랍니다.." << endl;
			system("pause");
			system("cls");
			return 0;
		}
	}
	return 0;
}

/// <summary> 맵 선택 </summary>
void BattleMap(INFO* Player, INFO* Monster, Item* sItem)
{
	system("cls");

	StatBar(Player);

	bool iWin = false;
	int iChoice;
	int RandomNumber;
	cout << "맵 난이도를 골라주세요" << endl;
	cout << "[1] 숲 탐험 [하]" << endl;
	cout << "[2] 동굴 탐험 [중]" << endl;
	cout << "[3] 성 탐험 [상]" << endl;
	cout << "[4] 돌아가기" << endl;
	cin >> iChoice;

	if (iChoice <= 3)
	{
		CreateMonster(Monster, iChoice, &RandomNumber);
		iWin = false;

		while(true)
		{
			system("cls");

			// 상태바
			StatBar(Player);
			StatBar(Monster);

			static int iRound(1);

			// 게임 판 세기
			cout << iRound << "ROUND!" << endl;
			cout << endl;
			iRound++;

			if (BattleChoice(Player, Monster, &iWin) == 1) // 공격을 누르면
			{
				if (BattleStart(Player, Monster, &iWin, &RandomNumber, sItem) == 0)
					break;
			}
			else
			{
				iRound = 1;
				return;
			}
		}
		if (iWin == true)
			Field(Player, Monster); // 효율은 안 좋다고 생각함
		if (iWin == false)
			return;
	}
}

/// <summary> 몬스터 생성 </summary>
void CreateMonster(INFO* Monster, int iChoice, int* RandomNumber)
{
	srand(unsigned(time(NULL))); // 난수 생성
	// 몬스터 개수 정하기

	// 맵 난이도에 따른 몬스터 개수 증가량
	if (iChoice == 1)
		*RandomNumber = 1;
	else if (iChoice == 2)
		*RandomNumber = 1 + rand() % 3;
	else if (iChoice == 3)
		*RandomNumber = 3 + rand() % 5;

	cout << endl;
	cout << "※ 몬스터는 강해지니 주의하세요! ※" << endl;
	
	// ◈ 몬스터 이름은 어떻게 나눌까?
	MonsterName(RandomNumber, Monster);
	Monster->iHp = (*RandomNumber + 1) * 20;
	Monster->iDefence = (*RandomNumber + 1) * 2;
	Monster->iAttack = (*RandomNumber + 1) * 5;
	Monster->iGold = (*RandomNumber + 1) * 50;
}

/// <summary> 몬스터 이름 </summary>
void MonsterName(int* RandomNumber, INFO* Monster)
{
	if (*RandomNumber == 0)
		strcpy_s(Monster[0].iName, " 초급 몬스터");
	if (*RandomNumber == 1)
		strcpy_s(Monster[0].iName, " 일반 몬스터");
	if (*RandomNumber == 2)
		strcpy_s(Monster[0].iName, " 중급 몬스터");
	if (*RandomNumber == 3)
		strcpy_s(Monster[0].iName, " 고급 몬스터");
	if (*RandomNumber == 4)
		strcpy_s(Monster[0].iName, " 보스 몬스터");
	if (*RandomNumber == 5)
		strcpy_s(Monster[0].iName, " 희귀 몬스터");
	if (*RandomNumber == 6)
		strcpy_s(Monster[0].iName, " 전설 몬스터");
}

/// <summary> 배틀 선택 </summary>
int BattleChoice(INFO* Player, INFO* Monster, bool* iWin)
{
	int iChoice;
	cout << "[1] 공격!" << "\t" << "[2] 도망!" << endl;
	cin >> iChoice;

	if (*iWin == true)
	{
		return 0;
	}

	if (iChoice == 1)
	{
		return 1;
	}
	else
		return 0;
}
/// <summary> 배틀 시작 </summary>
int BattleStart(INFO* Player, INFO* Monster, bool* pWin, int* RandomNumber, Item* sItem)
{
	int MonsterDown(0);

	Monster->iHp -= Player->iAttack + Monster->iDefence; // 몬스터 --
	Player->iHp -= Monster->iAttack + Player->iDefence; // 플레이어 --

	if (Monster-> iHp <= 0) // 만약 몬스터 hp가 0이라면
	{
		MonsterDown++; // 죽은 몬스터 세기

		if (MonsterDown == *RandomNumber) // 죽은 몬스터와 생성 몬스터의 개수가 같다면
		{
			cout << Player->iName << "는 승리하였습니다" << endl;
			
			for (int j = 0; j < *RandomNumber; j++)
			{
				Player->iGold += Monster->iGold; //골드 획득!
				delete[] Monster;
				Monster = nullptr;
			}

			*pWin = true;
			return 0;
		}
	}

	if (Player->iHp <= 0)
	{
		cout << Player->iName << "는 사망하였습니다" << endl;
		Player->iHp = 0;
		*pWin = true; // iDie를 파주면 좋겠지만, 인수가 늘어난다. iWin == Return 용으로 생각하자

		delete(Player);
		Player = nullptr;

		delete(sItem);
		sItem = nullptr;

		return 0;
	}

	Save(Player);
}

// 몬스터 동적할당 꼭 풀어주기!
