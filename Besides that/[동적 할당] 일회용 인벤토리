#include <iostream>
using namespace std;

// 랜덤으로 아이템을 뽑는다
// 인벤토리에 30개까지 차곡차곡 쌓아놓을 수 있다
// 인벤토리를 열면 정보가 나오면서 바로 사용하고 사라진다.

// 캐릭터 정보
typedef struct tag_Info
{
	char iName[30] = " ";
	int iHp = 100;

}INFO;

// 아이템 종류
enum tag_iTem
{
	BluePotion = 1,
	RedPotion,
	GreenPotion,
	Bread,
	Gun,
	Knife
}item;

// 함수
void UseItem(INFO* Player, int* pCount);

// tip. 동적 할당을 전역변수로 사용하게 되면 메모리가 그대로 남아있어 낭비가 심해진다
// 인벤토리 동적할당을 전역변수보다 지역변수로 해서 사용한 것은 없애야 한다

int main()
{
	INFO* PlayerInfo = new INFO();
// 플레이어 동적 할당 : 굳이..? 동적 할당으로 사용할 필요는 없을 것 같음
// 구조체를 포인터로 불러오는 걸로 충분할 듯

	static int iCount(0); //아이템 개수를 세야 한다. 동적 할당 배열 개수에 사용될 것
	int Array[30]; // 집어 넣고 동적 할당에 옮길 공간
	int open; // 인벤토리 열기
	int* pCount = &iCount;

	// 아이템 랜덤 고르기
	while (true)
	{
		system("cls");
		int iC; // 아이템 고르기
		int iINChicie;
		int RandomChoice;

		cout << "랜덤 뽑기 하시겠습니까" << endl;
		cout << "[1] 네" << endl;
		cout << "[2] 아니오" << endl;

		cin >> RandomChoice;

		if (RandomChoice == 2)
			break;

		system("cls");

		cout << "1~6 중 하나의 아이템을 골라주세요" << endl;
		cin >> iC;

    // 아이템 고르기
		switch (iC)
		{
		case BluePotion:
			cout << endl;
			cout << "BLUE POTION을 뽑았습니다" << endl;
			cout << "인벤토리에 넣어주세요 [체력 + 30 증가]" << endl; // 하나하나 효과를 다르게 하려면 함수를 계속해서 나누면 된다.
			break;

		case RedPotion:
			cout << endl;
			cout << "RED POTION을 뽑았습니다" << endl;
			cout << "인벤토리에 넣어주세요 [체력 + 30 증가]" << endl;
			break;

		case GreenPotion:
			cout << endl;
			cout << "GREEN POTION을 뽑았습니다" << endl;
			cout << "인벤토리에 넣어주세요 [체력 + 30 증가]" << endl;
			break;

		case Bread:
			cout << endl;
			cout << "BREAD을 뽑았습니다" << endl;
			cout << "인벤토리에 넣어주세요 [체력 + 30 증가]" << endl;
			break;

		case Gun:
			cout << endl;
			cout << "GUN을 뽑았습니다" << endl;
			cout << "인벤토리에 넣어주세요 [체력 + 30 증가]" << endl;
			break;

		case Knife:
			cout << endl;
			cout << "KNIFE을 뽑았습니다" << endl;
			cout << "인벤토리에 넣어주세요 [체력 + 30 증가]" << endl;
			break;
		}

  //아이템 인벤토리에 집어 넣거나 버리기
		cout << endl;
		cout << "인벤토리에 넣으시겠습니까" << endl;
		cout << "[1] 넣는다" << endl;
		cout << "[2] 버린다" << endl;
		cin >> iINChicie;

		if (iINChicie == 1)	
		{
			Array[*pCount] = iC;
			(*pCount)++; 
    // 하나씩 증감해서 아이템을 꺼낸 만큼 인벤토리를 열 것이다.
    // 전부 꺼내고 선택하는 걸로 수정하면 좋을 것 같다.
		}

		else
		{
			system("cls");
			cout << "아이템을 버립니다" << endl;
			return 0;
		}

    // 인벤토리 열기
		system("cls");
		cout << "인벤토리를 확인해주세요" << endl;
		cout << "[1] 인벤토리 열기" << endl;
		cout << "[2] 다시 고르기" << endl;
		cin >> open;

		int* Inventory = new int[*pCount];

		for(int i = 0; i < *pCount ; i++)
		{
			Inventory[i] = Array[i];	// 2. 처음 고른 아이템 하나만 담기는 에러가 있음 -> 이 문장은 문제가 없다. 
			cout << Inventory[i] << endl;
		}

		// 보유 아이템 확인
		if (open == 1)
		{
			for (int i = 0; i < (*pCount)+1; i++) // new~delete sizeof 하는 법을 모르겠음 , const로 고정시킨 값을 sizeof 해야 할까?
			{
				if (Inventory[i] == 1) // 2. 이 문장에서 *Inventory 를 해버려서 숫자는 제대로 빠지지만 처음 넣었던 아이템만 계속 나와버린 것이다.
				{                      // 동적 할당 배열은 기존 배열과 다르게 크기가 고정이 아닌 가변으로 빠질 수 있는 것이 다를 뿐이기 때문에 기존 배열과 같은 방식으로 사용하면 된다.
					cout << endl;
					cout << "BLUE POTION 보유" << endl;
				}
				if (Inventory[i] == 2)
				{
					cout << endl;
					cout << "RED POTION 보유" << endl;
				}
				if (Inventory[i] == 3)
				{
					cout << endl;
					cout << "GREEN POTION 보유" << endl;
				}
				if (Inventory[i] == 4)
				{
					cout << endl;
					cout << "BREAD 보유" << endl;
				}
				if (Inventory[i] == 5)
				{
					cout << endl;
					cout << "GUN 보유" << endl;
				}
				if (Inventory[i] == 6)
				{
					cout << endl;
					cout << "KNIFE 보유" << endl;
				}
				UseItem(PlayerInfo, pCount);
			}

			if (*Inventory == 0)
			{
				cout << endl;
				cout << "아무것도 없음" << endl;
			}
		}
    // 초기화 
     delete(Inventory);
	  Inventory = nullptr;
	}
	// 초기화 : 인베토리를 아이템 사용 직후에 초기화 하니까 더이상 사용할 수 없었음 (이상구조)
	delete(PlayerInfo);
	PlayerInfo = nullptr;

 
}

/// <summary> 아이템 사용</summary>
void UseItem(INFO* Player, int* pCount)
{
	cout << "아이템을 사용합니다" << endl;

	for(int i = 0; i < *pCount; i++)
	{
		Player->iHp += 30;
		cout << "===========================" << endl;
		cout << "현재 HP는 " << Player->iHp << " 입니다" << endl;

		*pCount-= 1; // 포인터 증감 연산자 ?
		system("pause");
	}
}
